// Returns a random DNA base
const returnRandBase = () => {
  const dnaBases = ['A', 'T', 'C', 'G']
  return dnaBases[Math.floor(Math.random() * 4)] 
}

// Returns a random single strand of DNA containing 15 bases
const mockUpStrand = () => {
  const newStrand = []
  for (let i = 0; i < 15; i++) {
    newStrand.push(returnRandBase())
  }
  return newStrand
}

const pAequorFactory = (specimenNum, dna) => {
  return {
    specimenNum: specimenNum,
    dna: dna,
    mutate() {
      const randomNumber = Math.floor(Math.random() * 15)
      let newBase = returnRandBase()
      while (newBase === dna[randomNumber]){
        newBase = returnRandBase()
      }
      dna[randomNumber] = newBase
      return dna
    },
    willLikelySurvive() {
      let count = 0
      for (i=0; i<dna.length; i++){
        if (dna[i] === 'G' || dna[i] === 'C'){
          count = count + 1
        }
      } if (count/15 * 100 >= 60) {
        return true
      } else {return false}
    }
  }
}

const generateDNA = () => {
  const generatedDNA = [];
  while (generatedDNA.length < 30){
    let example = pAequorFactory(generatedDNA.length, mockUpStrand());
    if (example.willLikelySurvive()) {
      generatedDNA.push(example.dna)
    }
  }return generatedDNA
}
const example1 = pAequorFactory(1, mockUpStrand())
console.log(generateDNA())
